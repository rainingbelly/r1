insert(Point x, KDNode t, int cd)
 { if t == null
 t = new KDNode(x) else if (x == t.data)
// error! duplicate
else if (x[cd] < t.data[cd])
      t.left = insert(x, t.left, (cd+1) % 2)
else
t.right = insert(x, t.right, (cd+1) % 2) return t

 def range(self, split_axis, all_data):
     split_all_data = all_data[:, split_axis]
     data_count = split_all_data.shape[0]
     med_index = int(data_count/2)
     sort_split_all_data = np.sort(split_all_data)
     range_data = sort_split_all_data[med_index]
     return range_data

def performance_test():
    points = [Point(x, y) for x in range(1000) for y in range(1000)]

    lower = Point(500, 500)
    upper = Point(504, 504)
    rectangle = Rectangle(lower, upper)
    #  naive method
    start = int(round(time.time() * 1000))
    result1 = [p for p in points if rectangle.is_contains(p)]
    end = int(round(time.time() * 1000))
    print(f'Naive method: {end - start}ms')        
assert result1 == resultt2, "target:%s\nrestult1:%s\nrestult2:%s\ntree:\n%s" \
% (str(Xi), str(nd), str(row), str(tree))
print("%d tests passed!" % test_times)
print("KD Tree Search %.2f s" % run_time_1)
print("Naive Search %.2f s" % run_time_2)

def NN(Point Q, kdTree T, int cd, Rect BB):
// if this bounding box is too far, do nothing
if T == NULL or distance(Q, BB) > best_dist: return
   // if this point is better than the best:
dist = distance(Q, T.data) if dist < best_dist:
best = T.data
      best_dist = dist
   // visit subtrees is most promising order:
if Q[cd] < T.data[cd]:
NN(Q, T.left, next_cd, BB.trimLeft(cd, t.data)) NN(Q, T.right, next_cd, BB.trimRight(cd, t.data))
else:
NN(Q, T.right, next_cd, BB.trimRight(cd, t.data)) NN(Q, T.left, next_cd, BB.trimLeft(cd, t.data))
